using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Filters;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Security.Claims;
using TikiSoft.UniversalPaymentGateway.Authorizers.LaPos.Comms;
using TikiSoft.UniversalPaymentGateway.Authorizers.LaPos.Data;
using TikiSoft.UniversalPaymentGateway.Authorizers.LaPos.Service;
using TikiSoft.UniversalPaymentGateway.Authorizers.MercadoPago.Service;
using TikiSoft.UniversalPaymentGateway.Dto.Examples;
using TikiSoft.UniversalPaymentGateway.Persistence.Contexts;
using TikiSoft.UniversalPaymentGateway.ApplicationServices;
using TikiSoft.UniversalPaymentGateway.API.Dto;
using TikiSoft.UniversalPaymentGateway.API.Dto.Examples;
using TikiSoft.UniversalPaymentGateway.API.ApplicationServices;

namespace TikiSoft.UniversalPaymentGateway.API.Extensions
{
    public static class ServiceExtensions
    {

        public static void ConfigureSwagger(this IServiceCollection services)
        {
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Title = "Tikisoft UTG API",
                    Version = "v1",
                    Description = "Gateway universal para autorización de pagos en Argentina",
                    Contact = new OpenApiContact
                    {
                        Name = "Alejandro Hofmann",
                        Email = "alehofmann@gmail.com",
                        Url = new Uri("http://alehofmann.github.io")
                    },
                    License = new OpenApiLicense
                    {
                        Name = "Uso solo bajo licencia"
                    }
                });

                c.ExampleFilters();
                c.OperationFilter<AddResponseHeadersFilter>(); // [SwaggerResponseHeader]
                c.OperationFilter<AppendAuthorizeToSummaryOperationFilter>(); // Adds "(Auth)" to the summary so that you can see which endpoints have Authorization
                                                                              // or use the generic method, e.g. c.OperationFilter<AppendAuthorizeToSummaryOperationFilter<MyCustomAttribute>>();

                // add Security information to each operation for OAuth2
                c.OperationFilter<SecurityRequirementsOperationFilter>();
                // or use the generic method, e.g. c.OperationFilter<SecurityRequirementsOperationFilter<MyCustomAttribute>>();

                // if you're using the SecurityRequirementsOperationFilter, you also need to tell Swashbuckle you're using OAuth2
                c.AddSecurityDefinition("oauth2", new OpenApiSecurityScheme
                {
                    Description = "Standard Authorization header using the Bearer scheme. Example: \"bearer {token}\"",
                    In = ParameterLocation.Header,
                    Name = "Authorization",
                    Type = SecuritySchemeType.ApiKey
                });

                //c.DescribeAllEnumsAsStrings();                                

                //Locate the XML file being generated by ASP.NET...
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                //... and tell Swagger to use those XML comments.
                c.IncludeXmlComments(xmlPath);
                c.EnableAnnotations();
            });

            services.AddSwaggerExamplesFromAssemblyOf<TransactionDtoExample>();
            services.AddSwaggerExamplesFromAssemblyOf<BadRequestResponseExample>();
            services.AddSwaggerExamplesFromAssemblyOf<InternalServerErrorResponseExample>();
        }
        public static void ConfigureAuthorizers(this IServiceCollection services, IConfiguration config)
        {
            services
                .AddTransient<IAuthorizerFactory, AuthorizerFactory>()

                .AddTransient<MercadoPagoAuthorizer>()
                .AddScoped<Func<MercadoPagoAuthorizer>>(x => x.GetService<MercadoPagoAuthorizer>)

                .AddScoped<LaPosAuthorizer>()
                .AddScoped<Func<LaPosAuthorizer>>(x => x.GetService<LaPosAuthorizer>)
                .AddScoped<ICommLayer, CommLayer>()
                .AddDbContext<LaPosDbContext>(options =>
                options.UseSqlite(config.GetConnectionString("LaPosDbContext")))
                .AddScoped<CardTypeRepository>();
        }
        public static void ConfigureDatabase(this IServiceCollection services, IConfiguration config)
        {
            services.AddDbContext<LaPosDbContext>(options =>
                options.UseSqlite(config.GetConnectionString("LaPosDbContext")));

            
            services.AddDbContext<ConfigDbContext>(options =>
                options.UseSqlite(config.GetConnectionString("MerchantDbContext")));
            
            services.AddScoped<ConfigDbContext>();


            //services.AddScoped<IUnitOfWork, UnitOfWork>();
        }
        public static void AddProductionExceptionHandler(this IApplicationBuilder app)
        {
            app.UseExceptionHandler(config =>
            {
                config.Run(async context =>
                {
                    context.Response.StatusCode = 500;
                    context.Response.ContentType = "application/json";

                    var error = context.Features.Get<Microsoft.AspNetCore.Diagnostics.IExceptionHandlerFeature>();
                    if (error != null)
                    {
                        var ex = error.Error;
                        ErrorResponseDto errorDto;

                        switch (ex.GetType().ToString())
                        {                            
                            //case "SomeExceptionType":
                            //    errorDto = new ErrorResponseDto
                            //    {
                            //        ErrorCode = "SomeError",
                            //        ErrorList = new List<string>() { ex.Message },
                            //        ErrorMessage = "Error Description",
                            //        ErrorSource = "utg"
                            //    };
                            //    break;
                            default:
                                errorDto = new ErrorResponseDto
                                {
                                    ErrorCode = "UnhandledError",
                                    ErrorList = new List<string>() { ex.Message },
                                    ErrorMessage = "Error inesperado (" + ex.GetType().ToString() + ") dentro del processor",
                                    ErrorSource = "utg"
                                };
                                break;
                        }
                        var output = JsonConvert.SerializeObject(errorDto);

                        await context.Response.WriteAsync(output);
                    }
                });
            });
        }
        public static void ConfigureAuthentication(this IServiceCollection services, IConfiguration config = null)
        {
            //Ahora autentica contra Auth0, pero acá hay un buen artículo sobre como implementar
            //IdentityServer4: https://kdrenski.com/wp/jwt-authentication-with-asp-net-core-and-identityserver4/
            //Aca hay un buen QuickStart si queremos algo mas sofisticado que usuarios InMemory: 
            // https://deblokt.com/2020/01/24/01-identityserver4-quickstart-net-core-3-1/
            // https://deblokt.com/2019/09/23/04-part-1-identityserver4-asp-net-core-identity/
            services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(options =>
            {
                options.Authority = config["Auth0:Domain"];
                options.Audience = config["Auth0:Audience"];
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    NameClaimType = ClaimTypes.NameIdentifier
                };
            });
        }

    }
}
